openapi: 3.1.0
info:
  title: Departments API
  version: 1.0.0
  description: API for departments management for KUB Education.
servers:
  - url: https://api.kub.education/api/v1
    description: Production API Server
  - url: https://stage.api.kub.education/api/v1
    description: Stage API Server

security:
  - bearerAuth: []

tags:
  - name: Departments
    description: Department management operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    AuthorizationHeaderUser:
      name: Authorization
      in: header
      required: true
      description: "Bearer token. Required role: USER"
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    AuthorizationHeaderAdmin:
      name: Authorization
      in: header
      required: true
      description: "Bearer token. Required role: ADMIN"
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

  schemas:
    DepartmentCreateRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
      required: [name]

    DepartmentUpdateRequest:
      type: object
      additionalProperties: false
      description: All fields are optional; include the ones to change.
      properties:
        name:
          type: string

    DepartmentDetailsResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required: [id, name]

paths:
  /departments:
    post:
      tags: [Departments]
      operationId: createDepartment
      summary: Create a new department
      description: Create a new department
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentCreateRequest"
            examples:
              example:
                value:
                  name: "Computer Science"
      responses:
        "201":
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepartmentDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "409": { description: Department with such name exists }
        "422": { description: Request body fails validation }
    get:
      tags: [Departments]
      operationId: listDepartments
      summary: Return a departments list
      description: Return a departments list
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      responses:
        "200":
          description: Departments list returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DepartmentDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }

  /departments/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Department identifier
        schema:
          type: integer
          format: int64
    get:
      tags: [Departments]
      operationId: getDepartmentById
      summary: Return a department by ID
      description: Return a department by ID
      x-roles: [USER]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderUser"
      responses:
        "200":
          description: Department returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepartmentDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Department not found }
    put:
      tags: [Departments]
      operationId: updateDepartmentById
      summary: Update a department by ID
      description: Update a department by ID
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentUpdateRequest"
            examples:
              allUpdatableFields:
                value:
                  name: "Computer Science and Engineering"
      responses:
        "200":
          description: Department updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepartmentDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Department not found }
        "409": { description: Department with such name exists }
        "422": { description: Request body fails validation }
    delete:
      tags: [Departments]
      operationId: deleteDepartmentById
      summary: Delete a department by ID
      description: Delete a department by ID
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      responses:
        "204": { description: Department deleted successfully }
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Department not found }
