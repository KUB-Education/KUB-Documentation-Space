openapi: 3.1.0
info:
  title: Students API
  description: Students API for students management on KUB Education Platform
  version: 1.0-dev
servers:
  - url: https://stage.api.kub.education
    description: Stage API Server

paths:
  /students:
    post:
      operationId: createStudent
      summary: Create student
      description: >
        Creates a new student.
        Required authority role: admin.
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: Bearer token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/student_request"
            examples:
              default:
                value:
                  last_name: "Doe"
                  first_name: "John"
                  middle_name: ""
                  email: "john.doe@example.com"
      responses:
        "201":
          description: Student created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student_response"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"

    get:
      operationId: getStudents
      summary: Retrieve a list of students
      description: >
        Retrieves a list of students.
        Required authority role: anyOf(admin, lecturer, student).
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: Bearer token.
      responses:
        "200":
          description: Successful retrieval of students.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student_response"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /students/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      operationId: getStudentById
      summary: Retrieve a specific student
      description: >
        Retrieves details of a specific student.
        Required authority role: anyOf(admin, lecturer, student).
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: Bearer token.
      responses:
        "200":
          description: Successful retrieval of the student.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student_response"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"

    put:
      operationId: updateStudent
      summary: Update a specific student
      description: >
        Updates details of a specific student.
        Required authority role: admin.
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: Bearer token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/student_request"
            examples:
              default:
                value:
                  last_name: "Doe"
                  first_name: "John"
                  middle_name: ""
                  email: "john.doe@example.com"
      responses:
        "200":
          description: Successful update of the student.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student_response"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"

    delete:
      operationId: deleteStudent
      summary: Delete a specific student
      description: >
        Deletes a specific student.
        Required authority role: admin.
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: Bearer token.
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /students/{id}/resend:
    post:
      operationId: resendStudentPassword
      summary: Resend password for a specific student
      description: >
        Resends the password for the specified student.
        Required authority role: admin.
      security:
        - BearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: Bearer token.
      responses:
        "200":
          description: Successful password resend.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student_response"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

components:
  responses:
    Created:
      description: Resource created successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/student_response"
    BadRequest:
      description: Bad request (Wrong request parameters).
    Unauthorized:
      description: Unauthorized (Wrong token in Authorization header).
    NotFound:
      description: Not Found (Resource not found).
    NoContent:
      description: No content (Successfully deleted).
    Conflict:
      description: Conflict (Resource already exists).
    UnprocessableEntity:
      description: Unprocessable Entity (Validation error).
    ServiceUnavailable:
      description: Service Unavailable (e.g. SMTP failure).

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token with required role (admin, lecturer, student)."

  schemas:
    student_request:
      type: object
      required:
        - last_name
        - first_name
        - email
      properties:
        last_name:
          type: string
          minLength: 1
          maxLength: 32
          pattern: "^(?=.{1,32}$)[A-Za-zАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя]+(?:[-'ʼ][A-Za-zАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя]+)*$"
          description: Must contain only English or Ukrainian letters, dash, and apostrophe; cannot be blank.
        first_name:
          type: string
          minLength: 1
          maxLength: 32
          pattern: "^(?=.{1,32}$)[A-Za-zАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя]+(?:[-'ʼ][A-Za-zАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя]+)*$"
          description: Must contain only English or Ukrainian letters, dash, and apostrophe; cannot be blank.
        middle_name:
          type: string
          minLength: 0
          maxLength: 32
          pattern: "^$|^(?=.{1,32}$)[A-Za-zАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя]+(?:[-'ʼ][A-Za-zАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя]+)*$"
          description: Optional. If provided, must contain only English or Ukrainian letters, dash, and apostrophe.
        email:
          type: string
          format: email
          maxLength: 64
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          description: Must be a valid email address.
      example:
        last_name: "Doe"
        first_name: "John"
        middle_name: ""
        email: "john.doe@example.com"

    student_response:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        last_name:
          type: string
          example: "Doe"
        first_name:
          type: string
          example: "John"
        middle_name:
          type: string
          example: ""
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        user_status:
          type: string
          example: "ACTIVATED"
