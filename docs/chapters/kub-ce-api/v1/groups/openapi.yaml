openapi: 3.1.0
info:
  title: Groups API
  version: 1.0.0
  description: API for groups management for KUB Education.
servers:
  - url: https://api.kub.education/api/v1
    description: Production API Server
  - url: https://stage.api.kub.education/api/v1
    description: Stage API Server

security:
  - bearerAuth: []

tags:
  - name: Groups
    description: Groups management operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    AuthorizationHeaderUser:
      name: Authorization
      in: header
      required: true
      description: "Bearer token. Required role: USER"
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    AuthorizationHeaderAdmin:
      name: Authorization
      in: header
      required: true
      description: "Bearer token. Required role: ADMIN"
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

  schemas:
    GroupCreateRequest:
      type: object
      properties:
        name:
          type: string
      required: [name]

    GroupUpdateRequest:
      type: object
      properties:
        name:
          type: string
      required: [name]

    GroupDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          type: string
          format: date-time

    GroupFullDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          type: string
          format: date-time
        students:
          type: array
          items:
            $ref: "#/components/schemas/StudentDetailsResponse"

    StudentDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: "#/components/schemas/UserDetailsResponse"

    UserDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        last_name:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum:
            - EMAIL_SENDING_FAILURE
            - ACTIVATION_PENDING
            - ACTIVATION_EXPIRED
            - ACTIVATED
            - RECOVERY_PENDING
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDetailsResponse"

    RoleDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum: [USER, STUDENT, LECTURER, ADMIN, SYSADMIN, ORGANIZER]

paths:
  /groups:
    post:
      tags: [Groups]
      operationId: createGroup
      summary: Create a new group
      description: Create a new group
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreateRequest"
            examples:
              example:
                value:
                  name: "ISS-41"
      responses:
        "201":
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "422": { description: Request body fails validation }
    get:
      tags: [Groups]
      operationId: listGroups
      summary: Return a groups list
      description: Return a groups list
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      responses:
        "200":
          description: Groups list returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }

  /groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Group identifier
        schema:
          type: integer
          format: int64
    get:
      tags: [Groups]
      operationId: getGroupById
      summary: Return a group by ID
      description: Return a group by ID
      x-roles: [USER]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderUser"
      responses:
        "200":
          description: Group returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Group not found }
    put:
      tags: [Groups]
      operationId: updateGroupById
      summary: Update a group by ID
      description: Update a group by ID
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdateRequest"
            examples:
              allUpdatableFields:
                value:
                  name: "Computer Science and Engineering"
      responses:
        "200":
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Group not found }
        "422": { description: Request body fails validation }
    delete:
      tags: [Groups]
      operationId: deleteGroupById
      summary: Delete a group by ID
      description: Delete a group by ID
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      responses:
        "204": { description: Group deleted successfully }
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Group not found }

  /groups/{id}/students:
    parameters:
      - name: id
        in: path
        required: true
        description: Group identifier
        schema:
          type: integer
          format: int64

    get:
      tags: [Groups]
      operationId: getGroupStudentsById
      summary: Return a group with students by ID
      description: Return a group with students by ID
      x-roles: [USER]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderUser"
      responses:
        "200":
          description: Group students returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupFullDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Group not found }

  /groups/{group-id}/students/{student-id}:
    parameters:
      - name: group-id
        in: path
        required: true
        description: Group identifier
        schema:
          type: integer
          format: int64
      - name: student-id
        in: path
        required: true
        description: Student identifier
        schema:
          type: integer
          format: int64

    put:
      tags: [Groups]
      operationId: addGroupStudent
      summary: Add group student
      description: Add student to group
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      responses:
        "200":
          description: Student added to group successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupFullDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "409": { description: Student already exists }
        "422": { description: Request body fails validation }

    delete:
      tags: [Groups]
      operationId: deleteGroupStudent
      summary: Delete group student
      description: Delete student from group
      x-roles: [ADMIN]
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeaderAdmin"
      responses:
        "200":
          description: Student deleted from group successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupFullDetailsResponse"
        "400": { description: Bad request }
        "401": { description: Token invalid or roles are missing }
        "404": { description: Student not found }
